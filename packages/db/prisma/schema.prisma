// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String
  websites Website[]
}

model Website {
  id       String        @id @default(uuid())
  url      String
  userId   String

  user     User          @relation(fields: [userId], references: [id])
  ticks    WebsiteTick[]
  disabled Boolean       @default(false)
}

model Validator {
  id         String        @id @default(uuid())
  publicKey  String
  location   String
  ip         String
  ticks      WebsiteTick[]
  pendingPayouts Int? @default(0)
}

model WebsiteTick {
  id             String        @id @default(uuid())
  websiteId      String
  validatorId    String
  createdAt      DateTime
  status         WebsiteStatus
  latency        Float

  parentTickId   String?
  parentTick     WebsiteTick?  @relation("TickToChildren", fields: [parentTickId], references: [id])
  childTicks     WebsiteTick[] @relation("TickToChildren")

  website        Website       @relation(fields: [websiteId], references: [id])
  validator      Validator     @relation(fields: [validatorId], references: [id])
}

enum WebsiteStatus {
  Good
  Bad
}



/*model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  websites Website[] // Relation back to websites
}

model Website {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  userId    String    @db.ObjectId // Explicitly mark as ObjectId

  user      User      @relation(fields: [userId], references: [id])
  ticks     WebsiteTick[]
  disabled  Boolean   @default(false)
}


model Validator {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  publicKey String
  location  String
  ip        String
  ticks     WebsiteTick[]

}

model WebsiteTick {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  websiteId   String   @db.ObjectId // Mark as ObjectId
  validatorId String   @db.ObjectId // Mark as ObjectId
  createdAt   DateTime
  status      WebsiteStatus
  latency     Float

  parentTickId String?      @db.ObjectId // Mark as ObjectId
  parentTick   WebsiteTick? @relation("TickToChildren", fields: [parentTickId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childTicks   WebsiteTick[]@relation("TickToChildren")

  website   Website   @relation(fields: [websiteId], references: [id])
  validator Validator @relation(fields: [validatorId], references: [id])
}

enum WebsiteStatus {
  Good
  Bad
}*/